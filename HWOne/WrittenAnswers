Word Problems:

1. Give  an  algorithm  to  find  all  nodes  less  than  some  value,  X,  in  a  binary  heap.
Your  algorithm  should  run  in  O(K),  where  K  is  the  number  of  nodes  output.
You  need  to  give  the  main  ideas  of  your  algorithm  and  analyze  the  running
time.

Answer:
This algorithm starts at some point in a binary search tree and checks the head node for the
given condition. If the head node meets the condition, the children are recursively searched
(if they are not null). When the algorithm finds a node with no children or a node that does not
meet the less than condition, it returns. A reference to list of nodes is updated with each of
the nodes meeting the condition. Pseudocode for the function is given here:

function findAllLessThan(X, head, listOfNodes):
    if head->value < X: # If the node meets the criteria
        listOfNodes->add(head)
    else: # Heap order property dead end
        return
    if head->children[0] != null:
        findAllLessThan(X, head->children[0], listOfNodes) # Search first child
        if head->children[1] != null: # Heap order property
            findAllLessThan(X, head->children[1], listOfNodes) # Search second child
    return

This recursive algorithm will visit each node at most once, and will, depending on the number given,
end early due to heap order properties. At each node there are at most 3 conditional checks and one
list addition, meaning this algorithm runs with linear scaling with respect to the number of nodes.


2. In  our  class,  we  have  shown  that  an  inorder  traversal  of  a  binary  tree  can  be
implemented  with  recursion.  Please  write  a  pseudo-code  to  implement  the
inorder traversal without using recursion.  You  need  to  choose  an  appropriate
data structure reviewed in class.

Answer:
Assume the binary tree is stored in an array with the following properties discussed in class:
    For any element in array position j (starting at 1) -
1. The left child is in position 2j
2. The right child is in the cell after the left child 2j+1
3 the parent is in the position floor(j/2)

With this structure, we can now think of an algorithm that will follow in-order traversal of a binary
tree, visiting all child nodes from left to right. This algorithm does assume that the root node has
two children. Modification of this to allow for less than two children would require checking for how
many children it has and breaking based off of that. Tree accesses need to be done with j-1, since
using j would cause the program to go out of bounds.

function inOrderTraversal(binaryArray):
    j = 1
    goRight = True
    while True:
        if j == 0:
            break
        if 2 * j exists and goRight is True:
            j = 2 * j
        else if 2 * j + 1 exists:
            j = 2 * j + 1
            goRight = True
        else:
            if j % 2 == 0:
                j = floor(j / 2)
                goRight = False
            else:
                while j % 2 != 0:
                    j = floor(j / 2)
                j = floor(j/2)
                goRight = False
    return


3. A cricket randomly hops between 4 leaves, on each turn hopping to one of the
other 3 leaves with equal probability. After n  â‰¥ 0 hops, what is the probability
that  the  cricket  has  returned  to  the  leaf  where  it  started?  Design  a  recursive
algorithm  to  solve  this  problem.  You  need  to  give  the  main  ideas  of  your
algorithm and the recursive formula.

Answer:
The probability that the cricket returns to the leaf that it started on after n hops is given by:

P(original, original, n) = 1/3*(1-P(original, original, n-1))
^ One third times the probability that it is not on the starting leaf after n-1
OR:
P(original, original, n) = 1/3*(P(original,notOrig1, n-1) + P(original,notOrig2, n-1) + P(original, notOrig3, n-1))
^ One third times the probability that it is not on the starting leaf after n-1

Since the former will be easier to calculate in the equal probability case, I plan on generating that as an answer.

A function that implements that logic:
function P(n)
    if n is 0:
        return 1
    return 1/3 * (1 - p(n-1))

This algorithm essentially converges onto 1/(number of leaves) and could be easily modified to handle any number
of leaves, even with different probabilities of landing on each.

In this case, the function converges onto 1/4.